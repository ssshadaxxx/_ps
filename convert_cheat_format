<#
    Convert NES Cheat Files
    v1.0
    July 28th, 2025

    By:      Robert Suarez
    Contact: RobertSuarezJr@gmail.com

    .SYNOPSIS
    Converts XML Cheat Files used for Nestopia to other emulator formats (i.e. FCEUX, Nestopia, Mesen)

    .DESCRIPTION
    Takes the existing XMLs from the $CheatRootPath parameter and creates new files compatible with other emulators

    .EXAMPLE
    Set $CheatRootPath and $TargetPath parameters:

        $CheatRootPath - Full path to folder containing XMLs cheats
            Set this path to where the XML files exist
            Example: C:\users\shadax\nes\cheats\Nestopia.Cheat.Code.Pack.2024-05-08\Nestopia Cheat Code Pack


        $TargetPath    - Full target path for converted cheat files
            Set this path to where you want the converted files stored.
            Example: C:\users\shadax\nes\cheats

    .INPUTS
    The Nestopia XML Cheat File Directory

    .OUTPUTS
    The New Cheat Files for alternate emulators

    .NOTES
    Must be in UTF8 format (for FCEUX, presumably all)
#>

Param (
    $CheatRootPath = "C:\users\shadax\nes\cheats\Nestopia.Cheat.Code.Pack.2024-05-08\Nestopia Cheat Code Pack",
    $TargetPath    = "C:\users\shadax\nes\cheats"
)

function Decode-GameGenieCode {
    param(
        [Parameter(Mandatory)]
        [string]$Code
    )

    # Game Genie character map (uppercase-only)
    $charMap = @{
        "A" = 0x0; "P" = 0x1; "Z" = 0x2; "L" = 0x3; "G" = 0x4; "I" = 0x5; "T" = 0x6; "Y" = 0x7;
        "E" = 0x8; "O" = 0x9; "X" = 0xA; "U" = 0xB; "K" = 0xC; "S" = 0xD; "V" = 0xE; "N" = 0xF
    }

    if ($Code.Length -ne 6 -and $Code.Length -ne 8) {
        throw "Invalid Game Genie code length. Only 6 or 8 character codes are supported."
    }

    $n = @()
    foreach ($char in $Code.ToCharArray()) {
        $charUpper = $char.ToString().ToUpperInvariant()
        if (-not $charMap.ContainsKey($charUpper)) {
            throw "Invalid character '$char' in code."
        }
        $n += $charMap[$charUpper]
    }

    # Decode address
    $address = 0x8000 +
        (($n[3] -band 0x7) -shl 12) -bor
        (($n[5] -band 0x7) -shl 8)  -bor (($n[4] -band 0x8) -shl 8) -bor
        (($n[2] -band 0x7) -shl 4)  -bor (($n[1] -band 0x8) -shl 4) -bor
        ($n[4] -band 0x7)           -bor ($n[3] -band 0x8)

    $data = 0
    $compare = $null

    if ($Code.Length -eq 6) {
        $data =
            (($n[1] -band 0x7) -shl 4) -bor (($n[0] -band 0x8) -shl 4) -bor
            ($n[0] -band 0x7) -bor ($n[5] -band 0x8)
    }
    else {
        # 8-character code
        $data =
            (($n[1] -band 0x7) -shl 4) -bor (($n[0] -band 0x8) -shl 4) -bor
            ($n[0] -band 0x7) -bor ($n[7] -band 0x8)

        $compare =
            (($n[7] -band 0x7) -shl 4) -bor (($n[6] -band 0x8) -shl 4) -bor
            ($n[6] -band 0x7) -bor ($n[5] -band 0x8)
    }

    # Return object
    [PSCustomObject]@{
        genie   = $Code.ToUpperInvariant()
        address = ('0x{0:X4}' -f $address)
        value   = ('0x{0:X2}' -f $data)
        compare = if ($compare -ne $null) { '0x{0:X2}' -f $compare } else { $null }
    }
}

# Gather Nestopia Cheat Files
$NesCheatXMLs = Get-ChildItem $CheatRootPath

### Test games ###
#
# $NesCheatXMLs = Get-ChildItem $CheatRootPath | ?{$_.name -eq "Mike Tyson's Punch-Out!! (Japan, USA) (En) (Rev 1).xml"}
# $NesCheatXMLs = Get-ChildItem $CheatRootPath | ?{$_.name -eq "1942 (Japan, USA) (En).xml"}
# $NesCheatXMLs = Get-ChildItem $CheatRootPath | ?{$_.name -eq "Super Mario Bros. 2 (USA) (Rev 1).xml"}
# $NesCheatXMLs = Get-ChildItem $CheatRootPath | ?{$_.name -eq "Yume Koujou Doki Doki Panic (Japan) [b].xml"}
# $NesCheatXMLs = Get-ChildItem $CheatRootPath | ?{$_.name -eq "Laser Invasion (USA).xml"}
### Test games ###

# Initiate counter for progress indication
$Counter = 0

foreach ($Game in $NesCheatXMLs) {
    # Increment counter, display progress information
    $Counter++
    "$($Game.Name) - $Counter \ $($NesCheatXMLs.Count)"

    # Load XML Data
    [xml]$xmlData = Get-Content -LiteralPath $Game.FullName
    $CheatData = $xmlData.cheats.cheat
    $GetDate = Get-Date -Format 'yyyy-MM-dd'

    #### Create FCEUX Format ####
    # Format:
    # S + <ADDRESS> + : + <VALUE> + : + <DESCRIPTION>
    #

    #
    # Examples:
    # S0001:01:Start on match 02 - Von Keiser
    # SC8080:00:e5:Invincibility (1 of 2)
    # SCa290:f8:01:Skip intro
    # SC82b5:75:f5:Invincibility (2 of 2)

    # Set FCEUX Directory, create if needed
    $FCEUXPath = $TargetPath + '\FCEUX' + ".Cheat.Code.Pack.$GetDate"
    New-Item -Path $FCEUXPath -ItemType Directory -ErrorAction SilentlyContinue

    # Set Game Cheat Path for FCEUX, file format = .cht
    $FCEUXCheatFile = $FCEUXPath + "\$($Game.Name.Replace('.xml','.cht'))"

    # Initiate Blank Converted Cheat File (adds blank to deal with an issue where the first cheat occasionally does not work for some reason, example 1942 - Infinite Lives)
    $ConvertedCheats = "`n"

    # Testing genie only value for Super Mario Bros. 2 (USA) (Rev 1): GEEPUZAG
    # $cheatdata = $cheatdata | ?{$_.description -eq 'Start on World 5 (3 of 3)'}

    # Build New Converted Cheat File
    foreach ($Cheat in $CheatData) {
        #$Cheat | Format-Table -AutoSize -Wrap

        # If missing address or value, check for genie code
        if ((!$Cheat.address -or !$Cheat.value) -and $Cheat.genie) {
            
            # Store Cheat Data before rewrite
            $cheatBackup = $Cheat

            # Decode the genie code
            $decode = Decode-GameGenieCode -Code $Cheat.genie

            # Rewrite values
            $Cheat = [PSCustomObject]@{
                genie       = $decode.genie
                address     = $decode.address
                value       = $decode.value
                compare     = $decode.compare
                description = $cheatBackup.description
            }
        }
        
        # If compare data present, set with compare "SC", otherwise set with no compare "S"
        If ($Cheat.compare) {
            # Applies only when memory matches compare
            # SC + <ADDRESS> + <VALUE> + : + <COMPARE> + : + <DESCRIPTION>
            $ConvertedCheats += "SC" + $Cheat.address.ToLower().Replace('0x','') + ':' + $Cheat.value.ToLower().Replace('0x','') + ':' + $Cheat.compare.ToLower().Replace('0x','') + ':' + $Cheat.description + "`n"
        }  else {
            # Always applies
            # S + <ADDRESS> + : + <VALUE> + : + <DESCRIPTION>
            $ConvertedCheats += "S" + $Cheat.address.ToLower().Replace('0x','') + ':' + $Cheat.value.ToLower().Replace('0x','') + ':' + $Cheat.description + "`n"
        }
    }

    # Export Converted Cheat file - UTF8 encoding
    $ConvertedCheats.TrimEnd() | Out-File -LiteralPath $FCEUXCheatFile -Encoding UTF8
}
